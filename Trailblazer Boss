import openai
import gspread
from google.oauth2.service_account import Credentials
from textblob import TextBlob
from googletrans import Translator
from transformers import CLIPProcessor, CLIPModel
from PIL import Image
import numpy as np
import os
from dotenv import load_dotenv
import logging

# === Setup Logging === #
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === Environment Setup === #
load_dotenv()  # Load .env file for environment variables
openai.api_key = os.getenv('OPENAI_API_KEY')  # OpenAI API key from environment variables

# === Google Sheets Setup === #
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
try:
    creds = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
    client = gspread.authorize(creds)
    SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')  # Spreadsheet ID from environment variables
    WORKSHEET_NAME = 'Game Data'
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)
except FileNotFoundError:
    logging.error("Error: 'credentials.json' file not found. Ensure it exists in the project directory.")
    exit(1)
except Exception as e:
    logging.error(f"Google Sheets Setup Error: {e}")
    exit(1)

# === AI and NLP Models === #
translator = Translator()
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

# === Dynamic Prompts === #
prompts_by_genre = {
    "RPG": ["What are the character progression mechanics?", "How does the storyline affect gameplay?"],
    "FPS": ["What weapons are available?", "What is the level design like?"],
    "Adventure": ["How is exploration rewarded?", "Describe the puzzle mechanics."]
}

# === Functions === #

def ask_ai(question):
    """Generate a response using OpenAI."""
    try:
        response = openai.Completion.create(
            engine="gpt-3.5-turbo",
            prompt=question,
            max_tokens=150,
            temperature=0.7
        )
        return response.choices[0].text.strip()
    except openai.error.OpenAIError as e:
        logging.error(f"OpenAI API Error: {e}")
        return None

def analyze_sentiment(response):
    """Perform sentiment analysis on the AI response."""
    try:
        blob = TextBlob(response)
        return blob.sentiment.polarity  # Polarity ranges from -1 (negative) to +1 (positive)
    except Exception as e:
        logging.warning(f"Sentiment Analysis Error: {e}")
        return 0  # Neutral sentiment

def analyze_image(image_path):
    """Analyze an image using the CLIP model."""
    try:
        image = Image.open(image_path).convert("RGB")
        inputs = clip_processor(images=image, return_tensors="pt")
        outputs = clip_model.get_image_features(**inputs)
        features = np.array(outputs[0])

        # Simulated feature extraction
        return {
            "Art Style": "Cel-shaded",
            "Environment": "Forest",
            "Mood": "Serene"
        }
    except Exception as e:
        logging.error(f"Image Analysis Error: {e}")
        return None

def update_row(row, index):
    """Process and update a single row."""
    try:
        question = row[0]
        if not question:
            logging.warning(f"Skipping row {index + 1}: Empty question.")
            return

        genre = row[2] if len(row) > 2 else "General"
        dynamic_prompt = prompts_by_genre.get(genre, [question])[0]
        response = ask_ai(dynamic_prompt)

        if response:
            sentiment = analyze_sentiment(response)
            language = row[3] if len(row) > 3 else "en"

            # Translate response if needed
            if language != "en":
                try:
                    response = translator.translate(response, dest=language).text
                except Exception as e:
                    logging.warning(f"Translation Error: {e}")

            # Batch update to Google Sheets
            sheet.update_cell(index + 1, 2, response)  # AI Response
            sheet.update_cell(index + 1, 5, f"Sentiment: {sentiment:.2f}")  # Sentiment
            logging.info(f"Updated row {index + 1}: {question} -> {response} (Sentiment: {sentiment:.2f})")
    except Exception as e:
        logging.error(f"Error processing row {index + 1}: {e}")

def fill_sheet():
    """Populate Google Sheets with AI responses and sentiment analysis."""
    try:
        rows = sheet.get_all_values()
        for i, row in enumerate(rows):
            if i == 0:  # Skip header row
                continue
            update_row(row, i)
    except gspread.exceptions.GSpreadException as e:
        logging.error(f"Google Sheets API Error: {e}")

# === Execution === #
if __name__ == "__main__":
    fill_sheet()
