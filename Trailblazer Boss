import openai
import gspread
from google.oauth2.service_account import Credentials
from textblob import TextBlob
from googletrans import Translator
from transformers import CLIPProcessor, CLIPModel
from PIL import Image
import numpy as np

# API Keys and Authentication
openai.api_key = 'your_openai_api_key_here'

# Google Sheets Setup
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
creds = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
client = gspread.authorize(creds)
SPREADSHEET_ID = 'your_spreadsheet_id_here'
WORKSHEET_NAME = 'Game Data'
sheet = client.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)

# Translator for Multi-Lingual Support
translator = Translator()

# CLIP Model for Image Recognition
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

# Dynamic Prompts by Genre
prompts_by_genre = {
    "RPG": ["What are the character progression mechanics?", "How does the storyline affect gameplay?"],
    "FPS": ["What weapons are available?", "What is the level design like?"],
    "Adventure": ["How is exploration rewarded?", "Describe the puzzle mechanics."]
}

# Function: Generate AI Response
def ask_ai(question):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=question,
        max_tokens=150,
        temperature=0.7
    )
    return response.choices[0].text.strip()

# Function: Sentiment Analysis
def analyze_sentiment(response):
    blob = TextBlob(response)
    return blob.sentiment.polarity  # Polarity: -1 (negative) to +1 (positive)

# Function: Image Analysis
def analyze_image(image_path):
    image = Image.open(image_path).convert("RGB")
    inputs = clip_processor(images=image, return_tensors="pt")
    outputs = clip_model.get_image_features(**inputs)
    features = np.array(outputs[0])
    
    # Simulated feature extraction for demo
    return {
        "Art Style": "Cel-shaded",
        "Environment": "Forest",
        "Mood": "Serene"
    }

# Main Function: Populate Google Sheet
def fill_sheet():
    rows = sheet.get_all_values()
    for i, row in enumerate(rows):
        if row[1] == '':  # Check if response is missing
            question = row[0]
            genre = row[2] if len(row) > 2 else "General"
            
            # Generate dynamic prompt
            dynamic_prompt = prompts_by_genre.get(genre, [question])[0]
            response = ask_ai(dynamic_prompt)
            
            # Sentiment Analysis
            sentiment = analyze_sentiment(response)
            
            # Translate if language is specified
            language = row[3] if len(row) > 3 else "en"
            if language != "en":
                response = translator.translate(response, dest=language).text
            
            # Update Google Sheet
            sheet.update_cell(i + 1, 2, response)  # AI Response
            sheet.update_cell(i + 1, 5, f"Sentiment: {sentiment:.2f}")  # Sentiment

            print(f"Updated row {i + 1}: {question} -> {response}")

# Function: Update Image Analysis
def populate_image_analysis(image_path, row):
    features = analyze_image(image_path)
    sheet.update_cell(row, 6, features["Art Style"])  # Art Style
    sheet.update_cell(row, 7, features["Environment"])  # Environment
    sheet.update_cell(row, 8, features["Mood"])  # Mood
    print(f"Updated row {row} with image analysis.")

# Execute the Bot
if __name__ == "__main__":
    # Fill sheet with AI responses
    fill_sheet()
    
    # Example: Populate image analysis for row 2
    # populate_image_analysis("path_to_image.jpg", 2)
